name: ðŸ”„ Sync PRs from master to next

on:
  workflow_run:
    workflows: ["ðŸ’¡ PR Merged"]
    types: [completed]

# Allow concurrent sync workflows since each PR uses its own branch
# concurrency: removed to allow parallel processing

permissions:
  contents: write
  pull-requests: write

env:
  BASE_BRANCH: main
  TARGET_BRANCH: next
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync:
    runs-on: ubuntu-latest
    if: >
      github.repository == 'wso2-extensions/identity-webhook-event-handlers' &&
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: ðŸ“¥ Download PR Number Artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-number
          github-token: ${{ env.GH_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Get merged PR information
        id: trigger_info
        run: |
          # Get the PR number from the artifact
          PR_NUMBER=$(cat ./PR_NUMBER)
          echo "PR Number from artifact: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "SYNC_MODE=pr" >> $GITHUB_ENV

          # Create unique sync branch name for this PR
          SYNC_BRANCH="sync-pr-${PR_NUMBER}-to-next"
          echo "SYNC_BRANCH=$SYNC_BRANCH" >> $GITHUB_ENV
          echo "Sync branch for PR #$PR_NUMBER: $SYNC_BRANCH"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Git
        run: |
          git config user.name "wso2-iam-bot"
          git config user.email "wso2-iam-bot@users.noreply.github.com"

      - name: Get PR commits
        run: |
          # Get all commits from this specific PR
          COMMITS=$(gh pr view $PR_NUMBER --json commits -q '.commits[].oid' | tr '\n' ' ')
          echo "COMMITS_TO_SYNC=$COMMITS" >> $GITHUB_ENV
          echo "Commits from PR #$PR_NUMBER: $COMMITS"

      - name: Create sync branch
        run: |
          # Validate that SYNC_BRANCH is set
          if [ -z "$SYNC_BRANCH" ]; then
            echo "Error: SYNC_BRANCH is not set"
            exit 1
          fi

          echo "Creating sync branch: $SYNC_BRANCH"

          # Fetch latest from target branch
          git fetch origin $TARGET_BRANCH

          # Create new sync branch from target
          git checkout $TARGET_BRANCH
          git checkout -b "$SYNC_BRANCH"

      - name: Cherry-pick commits (skip [skip ci], workflow files, pom.xml only)
        run: |
          if [ -z "$COMMITS_TO_SYNC" ]; then
            echo "No commits to sync."
            exit 0
          fi

          for commit in $COMMITS_TO_SYNC; do
            if [ -z "$commit" ]; then
              continue
            fi

            MESSAGE=$(git log -1 --pretty=%B $commit)
            FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r $commit)

            if [[ "$MESSAGE" =~ \[skip\ ci\] ]]; then
              echo "Skipping $commit because of [skip ci]"
              continue
            fi

            if echo "$FILES_CHANGED" | grep -q "^.github/workflows/"; then
              echo "Skipping $commit because it modifies a workflow"
              continue
            fi

            if ! echo "$FILES_CHANGED" | grep -v -E "pom\.xml" | grep -q '.'; then
              echo "Skipping $commit because it only modifies pom.xml files"
              continue
            fi

            echo "Cherry-picking commit $commit: $(git log -1 --oneline $commit)"
            git cherry-pick $commit || {
              echo "Cherry-pick failed for $commit. Attempting to skip..."
              git cherry-pick --skip
            }
          done

      - name: Push sync branch (force update)
        run: git push origin HEAD:"$SYNC_BRANCH" --force

      - name: Fetch target branch
        run: git fetch origin $TARGET_BRANCH:$TARGET_BRANCH || true

      - name: Create or update pull request
        run: |
          COMMITS_ON_BRANCH=$(git log ${{ env.TARGET_BRANCH }}..HEAD --oneline || true)
          if [ -z "$COMMITS_ON_BRANCH" ]; then
            echo "No commits to sync. Skipping PR creation."
            exit 0
          fi

          # Check for existing open PR for this sync branch
          EXISTING_PR=$(gh pr list \
            --base "${{ env.TARGET_BRANCH }}" \
            --head "$SYNC_BRANCH" \
            --state open \
            --json number \
            -q '.[0].number')

          # Get PR details for the merged PR
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q '.title')
          PR_AUTHOR=$(gh pr view $PR_NUMBER --json author -q '.author.login')
          TOTAL_COMMITS=$(echo "$COMMITS_ON_BRANCH" | wc -l | tr -d ' ')

          SYNC_TITLE="[Sync][${{ env.BASE_BRANCH }} -> ${{ env.TARGET_BRANCH }}][#${PR_NUMBER}]: $PR_TITLE"
          PR_BODY="ðŸ¤– **Auto-sync from ${{ env.BASE_BRANCH }}**

          This PR automatically syncs the changes from #${PR_NUMBER} to the \`${{ env.TARGET_BRANCH }}\` branch.

          **Original PR:** https://github.com/${{ github.repository }}/pull/${PR_NUMBER}
          **Author:** @${PR_AUTHOR}
          **Total commits:** $TOTAL_COMMITS
          **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          **Commits:**
          \`\`\`
          $(git log ${{ env.TARGET_BRANCH }}..HEAD --oneline)
          \`\`\`"

          if [ -n "$EXISTING_PR" ]; then
            echo "PR #$EXISTING_PR already exists for sync branch. Updating with new commits."
            gh pr edit $EXISTING_PR --title "$SYNC_TITLE" --body "$PR_BODY"
            echo "Updated existing PR #$EXISTING_PR with $TOTAL_COMMITS total commits"
          else
            NEW_PR=$(gh pr create \
              --base "${{ env.TARGET_BRANCH }}" \
              --head "$SYNC_BRANCH" \
              --title "$SYNC_TITLE" \
              --body "$PR_BODY")
            echo "Created new PR: $NEW_PR"
          fi
